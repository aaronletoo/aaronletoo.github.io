<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ThunderBuddy</title><link>http://kudou61.github.io/</link><description>Recent content on ThunderBuddy</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 04 Feb 2021 18:36:13 +0800</lastBuildDate><atom:link href="http://kudou61.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>docker开启远程API</title><link>http://kudou61.github.io/posts/docker-remote/</link><pubDate>Thu, 04 Feb 2021 18:36:13 +0800</pubDate><guid>http://kudou61.github.io/posts/docker-remote/</guid><description>docker的远程api支持tcp和ssh两种方式进行连接，ssh方式要求服务端版本大于18.09。 这里建议ssh方式，可以使用sshkey进行鉴权，使用tcp方式鉴权的话，需要生成tls证书，在无鉴权的情况下开放api非常危险，相当于裸奔。 ssh方式 注意docker 服务器端版本</description></item><item><title>树莓派自动挂载U盘</title><link>http://kudou61.github.io/posts/auto-mount/</link><pubDate>Wed, 27 Apr 2016 15:00:23 +0800</pubDate><guid>http://kudou61.github.io/posts/auto-mount/</guid><description>每次插入 U 盘后都要 ssh 登陆上，然后手动挂载非常麻烦的一件事情。 可以在 udev 设备管理器新建规则。 如果要挂载 ntfs 格式的 U 盘，需要安装 ntfs-3g。 $ sudo apt-get install ntfs-3g 若是需要挂载 exfat 格式的 U 盘，需要安装 exfat-utils exfat-fuse $ sudo apt-get install exfat-utils exfat-fuse 然后创建文件/etc/udev/rules.d/11-media-by-label-</description></item><item><title>使用SSH公钥登陆</title><link>http://kudou61.github.io/posts/public-key-login/</link><pubDate>Wed, 27 Apr 2016 10:09:34 +0800</pubDate><guid>http://kudou61.github.io/posts/public-key-login/</guid><description>SSH 是一台 Linux 主机的标准配置。 简单来说，SSH 是一种网络协议，用于计算机之间的加密登陆。more 如果一个用户从本地计算机，使用 SSH 协议登陆到另一台计算机，我们可以认为，这种登录是安全的。 基本用法 SSH 主要用户远程登录，如果你要用用户名 user，登陆远程主机 host，只需要输入下面的命令即可</description></item><item><title>raspberry的一些配置</title><link>http://kudou61.github.io/posts/raspberry/</link><pubDate>Tue, 26 Apr 2016 23:49:29 +0800</pubDate><guid>http://kudou61.github.io/posts/raspberry/</guid><description>Aria2 Aria2 是一个多线程下载工具，支持 HTTP/HTPPS，FTP，SFTP，BT 和 Metalink。 下载 可以跨平台使用，在 Linux 上可以使用自带的包管理器下载安装。 $ apt-get install aria2 配置 新建 aria2.conf 配置文件，dir 是下载文件保存路径，可以根据需要修改。 #用户名 #rpc-user=user #密码 #rpc-passwd=passwd #上面的认证方式不建议使用,建议使用下</description></item><item><title>githug小游戏</title><link>http://kudou61.github.io/posts/githug/</link><pubDate>Wed, 23 Mar 2016 18:50:07 +0800</pubDate><guid>http://kudou61.github.io/posts/githug/</guid><description>install githug 是一个用 ruby 写的小游戏，可以用来锻炼常用的 git 命令。 githug 需要 ruby 的版本在 1.8.7 以上。可以用下面的命令来查看 ruby 版本。 ruby --version 如果你没有安装 ruby，可以需要到 ruby 的官网上安装对应的版本。centos 可以用下面的命令安装。 yum install ruby 安装好 ruby 后，用 gem 包管理器来安装 githug。 gem install githug 初始化 进入一个你的常</description></item><item><title>每次都要安装的东西</title><link>http://kudou61.github.io/posts/easy-to-install/</link><pubDate>Sat, 19 Mar 2016 22:16:49 +0800</pubDate><guid>http://kudou61.github.io/posts/easy-to-install/</guid><description>#homebrew /usr/bin/ruby -e &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;#34; vim7.4 mac 中自带的 vim 是 7.3 版本的，如果使用 spf13，To make all the plugins work, specifically neocomplete, you need vim with lua. brew install vim --with-lua 安装报错的话，可能需要 ruby 环境 spf13 curl https://j.mp/spf13-vim3 -L &amp;gt; spf13-vim.sh &amp;amp;&amp;amp; sh spf13-vim.sh python2.7 brew install python 更新 pip pip install --upgrade pip 更新 pip 后/usr/local/bin/pip 会重新创建链接，如果安装了 Python3，pip 的指向会改变，需要重新创建</description></item><item><title>终端下快速打开编辑文件、进入目录、键入历史命令</title><link>http://kudou61.github.io/posts/fasd-with-fzf/</link><pubDate>Mon, 04 Jan 2016 14:35:46 +0800</pubDate><guid>http://kudou61.github.io/posts/fasd-with-fzf/</guid><description>如果你经常使用终端，那么你必然会经常切换目录。如果频繁的使用 cd 命令，那么会非常浪费时间。 有没有比较高效的方法呢，答案是肯定的。 如果只需要解决切换目录的问题的话，用 autojump 就可以实现，使用 j 键加目录可以快速的递归查找到该目录，但并不是最好的方法。 这里推荐两个工具，fasd and fzf，可以满</description></item><item><title>Go语言</title><link>http://kudou61.github.io/posts/install-go/</link><pubDate>Wed, 23 Dec 2015 15:27:52 +0800</pubDate><guid>http://kudou61.github.io/posts/install-go/</guid><description>Go 语言又名 Golang（官网link），是 Google 干爹在 2009 年发布的开源编程语言。 Golang 专门针对多处理器系统应用程序的编程进行了优化，使用 Go 编译的程序可以媲美 C 或 C++代码的数独，而且更安全、支持并行进程。 Codis 是豌豆荚发布的一个分布式 Redis 解决方案，使用 Go 和 C 语言开发，以代理的方式实现了一个 Redis 分布</description></item><item><title>Java Input/OutputStreamReader读写文件</title><link>http://kudou61.github.io/posts/java-io/</link><pubDate>Fri, 18 Sep 2015 21:10:27 +0800</pubDate><guid>http://kudou61.github.io/posts/java-io/</guid><description>code public class rw_file { public static void main(String[] args) { String url = &amp;#34;log.txt&amp;#34;; try{ BufferedReader br = new BufferedReader( new InputStreamReader(new FileInputStream(url),&amp;#34;UTF-8&amp;#34;)); String data = null; StringBuffer str=new StringBuffer(); while((data = br.readLine())!=null) { str.append(data+&amp;#34;\n&amp;#34;); } System.out.println(str); br.close(); // Test test=new Test(); // test.ece(str.toString()); }catch(Exception e){ e.printStackTrace(); } } public void ece(String str){ try{ BufferedWriter bw = new BufferedWriter( new OutputStreamWriter(new FileOutputStream(url,false),&amp;#34;UTF-8&amp;#34;)); bw.write(str); bw.flush(); bw.close(); }catch(Exception e){ e.printStackTrace(); } } }</description></item><item><title>About</title><link>http://kudou61.github.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kudou61.github.io/about/</guid><description/></item><item><title>Archives</title><link>http://kudou61.github.io/archives/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kudou61.github.io/archives/</guid><description/></item><item><title>Java多线程</title><link>http://kudou61.github.io/posts/java-thread/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kudou61.github.io/posts/java-thread/</guid><description>Java 多线程实现方式主要有三种：继承 Thread 类，实现 Runnable，使用 ExecutorService、Callable、Future 实现有返回结果的多线程。其中前两种没有返回值，只有最后一种是带返回值的。 线程状态类型 新建状态（New）：新创建了一个线程对象。 就绪状态（Runnable）</description></item><item><title>如何使用dbutils</title><link>http://kudou61.github.io/posts/dbutils/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kudou61.github.io/posts/dbutils/</guid><description>pom 文件中添加如下内容 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;commons-dbutils&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;commons-dbutils&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.6&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.1.36&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;</description></item><item><title>小技巧</title><link>http://kudou61.github.io/posts/little-trick/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kudou61.github.io/posts/little-trick/</guid><description>Sublime 在命令行中使用 Sublime 打开文件 可以使用软连接方式： sudo ln -s &amp;quot;/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl&amp;quot; /usr/bin/subl 执行后会在/usr/bin 下建立指向 Sublime 的软连接 ll /usr/bin|grep subl lrwxr-xr-x 1 root wheel 63B 6 1 11:38 subl -&amp;gt; /Applications/Sublime Text.app/Contents//SharedSupport/bin/subl 还可以使用 alias alias subl=&amp;quot;'/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl'&amp;quot;</description></item><item><title>常用sql语句</title><link>http://kudou61.github.io/posts/sql-base/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kudou61.github.io/posts/sql-base/</guid><description>基础 创建数据库 CREATE DATABASE database_name 删除数据库 drop database db_name 创建新表 create table table_name( colume-1 type-1 [not null][primary key], colume-2 type-2 [not null], &amp;hellip; ) 根据已有的表创建新表 create table table-new like table_old create table table-new as select col1,col2&amp;hellip; from table_old definition only 删除新表 drop table table_name 增加一列 alter table table_name add column col_name type 添加主键 alter table table_name add primary key(col) 删除主键 alter table table_name drop primary key(col) 创建索引 create [unique] index idx_name on table_name(col&amp;hellip;) 删除索引 drop index idx_name 创建视图 create view viewname as select statement 删除视图 drop view viewname 简单查询 插入：</description></item><item><title>理解sql注入</title><link>http://kudou61.github.io/posts/sql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kudou61.github.io/posts/sql/</guid><description>MySQL 我们首先在数据库中建立一张 job 表，存放职位信息。 mysql&amp;gt; create table jobs( -&amp;gt; id int not null primary key, -&amp;gt; job_desc char(20), -&amp;gt; level int ); Query OK, 0 rows affected (0.03 sec) 插入几条记录后查询 mysql&amp;gt; select * from jobs; +----+------------------+-------+ | id | job_desc | level | +----+------------------+-------+ | 1 | manager | 10 | | 2 | product manager | 9 | | 3 | product designer | 8 | +----+------------------+-------+ 3 rows in set (0.00 sec) 现在我们根据 id 来查询工作信息 mysql&amp;gt; select * from jobs where id = 1; +----+----------+-------+ | id | job_desc | level | +----+----------+-------+ | 1 | manager | 10</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>笔记 on ThunderBuddy</title>
    <link>http://kudou61.github.io/tags/%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 笔记 on ThunderBuddy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language><atom:link href="http://kudou61.github.io/tags/%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java多线程</title>
      <link>http://kudou61.github.io/posts/java-thread/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kudou61.github.io/posts/java-thread/</guid>
      <description>Java 多线程实现方式主要有三种：继承 Thread 类，实现 Runnable，使用 ExecutorService、Callable、Future 实现有返回结果的多线程。其中前两种没有返回值，只有最后一种是带返回值的。
线程状态类型  新建状态（New）：新创建了一个线程对象。 就绪状态（Runnable）：线程对象创建后，其他线程调用了该对象的 start()方法。该状态的线程位于可运行线程池中，变得可运行，等待获取 CPU 的使用权。 运行状态（Running）：就绪状态的线程获取了 CPU，执行程序代码。 阻塞状态（Blocked）：阻塞状态是线程因为某种原因放弃 CPU 使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：  等待阻塞：运行的线程执行 wait()方法，JVM 会把该线程放入等待池中。 同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则 JVM 会把该线程放入锁池中。 其他阻塞：运行的线程执行 sleep()或 join()方法，或者发出了 I/O 请求时，JVM 会把该线程置为阻塞状态。当 sleep()状态超时、join()等待线程终止或者超时、或者 I/O 处理完毕时，线程重新转入就绪状态。   死亡状态（Dead）：线程执行完了或者因异常退出了 run()方法，该线程结束生命周期。  继承 Thread 类实现多线程 Thread 的本质上也是实现了 Runnable 接口的一个实例，它代表一个线程的实例，并且，启动线程的方法就是通过 Thread 类的 start()方法，start()方法是一个 native 方法，它将启动一个新线程，并执行 run 方法。这种方式实现多线程的方式就是 extend Thread，并覆写 run()方法。例如</description>
    </item>
    
    <item>
      <title>小技巧</title>
      <link>http://kudou61.github.io/posts/little-trick/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kudou61.github.io/posts/little-trick/</guid>
      <description>Sublime 在命令行中使用 Sublime 打开文件 可以使用软连接方式：
sudo ln -s &amp;quot;/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl&amp;quot; /usr/bin/subl 执行后会在/usr/bin 下建立指向 Sublime 的软连接
ll /usr/bin|grep subl lrwxr-xr-x 1 root wheel 63B 6 1 11:38 subl -&amp;gt; /Applications/Sublime Text.app/Contents//SharedSupport/bin/subl 还可以使用 alias
alias subl=&amp;quot;&#39;/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl&#39;&amp;quot; </description>
    </item>
    
  </channel>
</rss>
